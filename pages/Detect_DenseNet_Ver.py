import streamlit as st
from keras.preprocessing.image import load_img, img_to_array
import numpy as np
from keras.models import load_model
from PIL import Image

page_bg_img = """
<style>
[data-testid="stAppViewContainer"]{
background-image: url("https://images.unsplash.com/photo-1562813733-b31f71025d54?q=80&w=2069&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D");
background-size: cover;
}
</style>
"""
st.markdown(page_bg_img, unsafe_allow_html=True)

logo_url = "icons/vnuk-symbol-only-official-800x237.png"
st.sidebar.image(logo_url)

st.sidebar.markdown(
    "<br> <br> <br> <br> <br> <br> <h1 style='text-align: center; font-size: 18px; color: #0080FF;'>Â© 2024 | baodeptrai</h1>", unsafe_allow_html=True)

# Load the pre-trained model
model = load_model('best_model2.h5')

# Define the categories
CATEGORIES = ['Benign', 'Gatak', 'Kelihos_ver1', 'Kelihos_ver3', 'Lollipop', 'Obfuscator.ACY', 'Ramnit', 'Simda', 'Tracur', 'Vundo']

# Streamlit app
st.title("Malware Image Classification")

st.write("Upload an image to classify it as one of the known malware types.")

# File uploader
uploaded_file = st.file_uploader("Choose an image...", type="png")

if uploaded_file is not None:
    # Load the image
    img = Image.open(uploaded_file)
    
    # Display the image
    st.image(img, caption='Uploaded Image', use_column_width=True)
    st.write("")
    st.write("Classifying...")
    
    # Preprocess the image
    img = img.resize((224, 224))  # Resize to the expected input size
    if img.mode != 'RGB':
        img = img.convert('RGB')  # Convert to RGB if the image is not already in RGB
    img_array = img_to_array(img)
    img_array = np.expand_dims(img_array, axis=0)
    img_array = img_array / 255.0  # Normalize to [0, 1]
    
    # Predict the class
    prediction = model.predict(img_array)
    predicted_class_index = np.argmax(prediction)
    pred_name = CATEGORIES[predicted_class_index]
    
    # Display the prediction
    st.write(f"Predicted class: {pred_name}")
    st.write("Prediction probabilities:", prediction)
